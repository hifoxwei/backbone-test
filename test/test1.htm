
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<meta name="viewport" content="width=device-width">
<link rel="canonical" href="http://backbonejs.org" />
<link rel="icon" href="docs/images/favicon.ico" />
<title>Backbone</title>
</head>
<body>
<div id="app">
<p> 
<input type="text" name="" id="name" value="" placeholder="text input can search" />
<button type="button" class="add">add</button>
<button class="search">search</button>
</p>
<ul id="test">
</ul>
</div>
<script type="text/template" id="J_Template">
<span><%= title%>: <%= name %> </span> 
<button class="delete">delete</button>
</script>
<script src="lib/jquery.js"></script>
<script src="lib/underscore.js"></script>
<script src="lib/backbone.js"></script>
<script src="lib/backbone.localStorage.js"></script>
<script type="text/javascript">
//Model
var RowModel = Backbone.Model.extend({
    defaults : {
        title : 'name',
        name : 'undefine'
    },
    validate : function(attrs, options) {
        _.each(rows.toJSON(), function(obj) {
            if (attrs.name === obj.name) {
                return 'forbeden!'
            }
        })
    }
})
//var rowModel = new RowModel();

//Collection
var Rows = Backbone.Collection.extend({
        model : RowModel,
        localStorage: new Backbone.LocalStorage("rows"),
    })
var rows = new Rows();
        
//View
var RowView = Backbone.View.extend({
    tagName: "li",
    className: "test",
    id : 'row-1',
    //model : rows,//bind to model
    events: {
        "click .delete": "delete"
    },
    template : _.template(this.$('#J_Template').html()),
    initialize: function() {
          this.listenTo(this.model, 'destroy', this.remove);
    },
    isValid : function () {
        return this.model.isValid();
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    delete : function(){
         this.model.destroy();
    }
});

var AppView = Backbone.View.extend({
        el : $('#app'), 
        root : $('#test'),
        input : $('#name'),
        events: {
           "click .add":   "add",
           "keypress #name":  "createOnEnter",
           "click .search":  "search",
        },
        initialize : function () {
           this.listenTo(rows, 'add', this.addOne);
           this.listenTo(rows, "invalid", function(model, error) {
               console.log('hifoxwei' + error)
           });
           rows.fetch();
        },
        render : function(){
            return this;
        },
        clear : function(){
            this.input.val('');
        },
        addOne: function(row) {
            var view = new RowView({model: row});
            view.isValid() && this.root.append(view.render().el);
            this.clear();
        },
        isEmpty : function () {
            return !this.input.val();
        },
        add : function(){
            if(this.isEmpty()) return;
            //trigger add event
            this.addOne(rows.create({name : this.input.val()}));
        },
        clearCompleted: function() {
            _.invoke(rows.models, 'destroy');
            return false;
        },
        createOnEnter : function(e) {
            if (e.keyCode != 13) return;
            this.add();
        },
        search : function(){
            //this.clearCompleted();
            var filter = rows.where({name : this.input.val()});
            _.invoke(filter, 'save');
        }
    })
var app = new AppView;
</script>
</body>
</html>
